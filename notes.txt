Providers in Nest:
    -> Fundamental and essential concept
    -> Many basic Nest classes are providers:
    eg.: Services, Repositories, Factories, Helpers
    Main Idea:
        ->Dependency Injection (Object can create various relationship with each other)
    A provider is class annoted by @Injectable()
    Scope:
        Lifetime of a Provider instance
        Default is 'Singleton'
        Single shared instance
        Created during bootstrap, destroyed during shuts down
        We can also make it request scoped by, @Injectable({ scope: Scope.REQUEST })

Sub-Class of HttpException
    Eg:  throw new NotFoundException();

Built-in pipes
    ValidationPipe
    ParseIntPipe
    ParseBoolPipe
    ParseArrayPipe
    ParseUUIDPipe
    DefaultValuePipe

Typical usage of pipe
    Transformation : transform input data to the desired form(eg: from string to integer)
    Validation : validate the request payload with custom Pipe